package com.hcpt.multileagues.activities;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.TabLayout;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewPager;
//import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.AppCompatActivity;
//import android.util.TypedValue;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import com.hcpt.multileagues.R;
import com.hcpt.multileagues.adapters.TabsMatchDetailAdapter;
import com.hcpt.multileagues.configs.Constants;
import com.hcpt.multileagues.configs.JsonConfigs;
//import com.hcpt.multileagues.fragments.LineupsFragment;
//import com.hcpt.multileagues.fragments.TimelineFragmentNew;
import com.hcpt.multileagues.objects.MatchObj;
//import com.hcpt.multileagues.pagerslidingstabstrip.PagerSlidingTabStrip;
import com.hcpt.multileagues.utilities.DateTimeUtility;
import com.hcpt.multileagues.widget.textview.TextViewRobotoRegular;

public class MatchDetailActivity extends AppCompatActivity {

    public static MatchObj currentMatch;

    private TabLayout tabs;
    public ViewPager pager;
    private TabsMatchDetailAdapter adapter;
    private TextViewRobotoRegular txtDay, txtStatus, txtStadium, txtTeam1, txtTeam2;
    private TextView txtScoreTeam1, txtScoreTeam2, tvMinute, tvDate;
    private TextView tvHomePen, tvAwayPen;
    private ImageButton btnBack, btnRefresh;
    private ImageView ivStatus;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_match_detail);

        // Enable Up button.
        try {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setTitle(R.string.dash_board);
            getSupportActionBar().hide();
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        initViews();
        initTabs();
        initData();
        initControl();
        // Admob
        MainActivity.initBannerAdsOnActivity(this, R.id.ll_admob);
    }

    private void initViews() {
        txtScoreTeam1 = (TextView) findViewById(R.id.txtScoreTeam1MatchDetail);
        txtScoreTeam2 = (TextView) findViewById(R.id.txtScoreTeam2MatchDetail);
        txtTeam1 = (TextViewRobotoRegular) findViewById(R.id.txtTeam1MatchDetail);
        txtTeam2 = (TextViewRobotoRegular) findViewById(R.id.txtTeam2MatchDetail);
        txtStadium = (TextViewRobotoRegular) findViewById(R.id.txtStadiumMatchDetail);
        tvMinute = (TextView) findViewById(R.id.tv_minute);
        tvDate = (TextView) findViewById(R.id.tv_date);
        btnBack = (ImageButton) findViewById(R.id.bt_back);
        btnRefresh = (ImageButton) findViewById(R.id.btnRefreshMatchDetail);
        ivStatus = (ImageView) findViewById(R.id.iv_status);
        tvHomePen = (TextView) findViewById(R.id.tv_home_pen);
        tvAwayPen = (TextView) findViewById(R.id.tv_away_pen);
    }

    private void initData() {
        txtTeam1.setText(currentMatch.getmHomeName());
        txtTeam2.setText(currentMatch.getmAwayName());
        String homePen = "";
        String awayPen = "";
        if (currentMatch.getmMatchStatus().equals(JsonConfigs.MATCH_STATUS_FINISHED)) {
            if (currentMatch.getHomePen() != null && !currentMatch.getHomePen().trim().isEmpty()
                    && currentMatch.getHomePen().trim().length() != 0 && !currentMatch.getHomePen().equals("null")
                    && !currentMatch.getHomePen().trim().equals("")) {
                homePen = "(" + currentMatch.getHomePen() + ")";
            }
            if (currentMatch.getAwayPen() != null && !currentMatch.getAwayPen().trim().isEmpty()
                    && currentMatch.getAwayPen().trim().length() != 0 && !currentMatch.getAwayPen().equals("null")
                    && !currentMatch.getAwayPen().trim().equals("")) {
                awayPen = "(" + currentMatch.getAwayPen() + ")";
            }
        }
        if (currentMatch.getmMatchStatus().equals(JsonConfigs.MATCH_STATUS_NOT_STARTED)) {
            txtScoreTeam1.setText("?");
            txtScoreTeam2.setText("?");
            tvHomePen.setText(homePen);
            tvAwayPen.setText(awayPen);
        } else {
            txtScoreTeam1.setText(currentMatch.getmHomeScore());
            txtScoreTeam2.setText(currentMatch.getmAwayScore());
            tvHomePen.setText(homePen);
            tvAwayPen.setText(awayPen);
        }

        String status = currentMatch.getmMatchStatus();
        String strTime = "";
        String date = DateTimeUtility.convertTimeStampToDate(currentMatch.getmTime(), "dd MMM");
        tvDate.setText(date);
        if (currentMatch.getmMinute().trim().equalsIgnoreCase(Constants.POSTPONDED)) {
            strTime = Constants.POSTPONDED;
        } else if (currentMatch.getmMinute().trim().equalsIgnoreCase(Constants.CANCELLED)) {
            strTime = Constants.CANCELLED;
        } else if (currentMatch.getmMinute().trim().equalsIgnoreCase(Constants.ABANDONED)) {
            strTime = Constants.ABANDONED;
        } else {
            if (status.equals(JsonConfigs.MATCH_STATUS_NOT_STARTED)) {
                strTime = DateTimeUtility.convertTimeStampToDate(currentMatch.getmTime(), "HH:mm");
                ivStatus.setImageResource(R.drawable.bg_gray_circle);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    tvMinute.setTextColor(getColor(R.color.textColorPrimary));
                    tvDate.setTextColor(getColor(R.color.textColorPrimary));
                } else {
                    tvMinute.setTextColor(ContextCompat.getColor(this, R.color.textColorPrimary));
                    tvDate.setTextColor(ContextCompat.getColor(this, R.color.textColorPrimary));
                }
            } else if (status.equals(JsonConfigs.MATCH_STATUS_ACTIVE)) {
                strTime = getResources().getString(R.string.live) + ", " + currentMatch.getmMinute() + "'";
                ivStatus.setImageResource(R.drawable.bg_green_circle);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    tvMinute.setTextColor(getColor(R.color.white));
                    tvDate.setTextColor(getColor(R.color.white));
                } else {
                    tvMinute.setTextColor(ContextCompat.getColor(this, R.color.white));
                    tvDate.setTextColor(ContextCompat.getColor(this, R.color.white));
                }
            } else if (status.equals(JsonConfigs.MATCH_STATUS_FINISHED)) {
                strTime = getResources().getString(R.string.finish);
                ivStatus.setImageResource(R.drawable.bg_gray_circle);
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    tvMinute.setTextColor(getColor(R.color.textColorPrimary));
                    tvDate.setTextColor(getColor(R.color.textColorPrimary));
                } else {
                    tvMinute.setTextColor(ContextCompat.getColor(this, R.color.textColorPrimary));
                    tvDate.setTextColor(ContextCompat.getColor(this, R.color.textColorPrimary));
                }
            }
        }

        tvMinute.setText(strTime);
        txtStadium.setText(currentMatch.getmStadium());
    }

    private void initControl() {
        btnBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        btnRefresh.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setAction(Constants.REFRESH_DATA);
                sendBroadcast(intent);
            }
        });
    }

//    @Override
//    public boolean onPrepareOptionsMenu(Menu menu) {
//        // Hide menus.
//        MenuItem item = menu.findItem(R.id.action_filter);
//        item.setVisible(false);
//
//        return super.onPrepareOptionsMenu(menu);
//    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        super.onCreateOptionsMenu(menu);

        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        if (item.getItemId() == android.R.id.home) {
            finish();
        }

        return super.onOptionsItemSelected(item);
    }

    // Create tabs.
    private void initTabs() {
        tabs = (TabLayout) findViewById(R.id.tabs);
        pager = (ViewPager) findViewById(R.id.pager);
        FragmentManager manager = getSupportFragmentManager();
        adapter = new TabsMatchDetailAdapter(manager, this, currentMatch.getmMatchId());
        pager.setOffscreenPageLimit(2);
        pager.setAdapter(adapter);
        tabs.setupWithViewPager(pager);

        final int pageMargin = (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP, 4, getResources().getDisplayMetrics());
        pager.setPageMargin(pageMargin);
        pager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabs));
        tabs.setTabsFromPagerAdapter(adapter);
    }
}
